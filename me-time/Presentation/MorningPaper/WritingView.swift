//
//  WritingView.swift
//  me-time
//
//  Created by junehee on 9/17/24.
//

import SwiftUI
import RealmSwift

struct WritingView: View {
    
    @Binding var isWritingViewPresent: Bool  /// Î©îÏù∏ÏóêÏÑú ÏûëÏÑ±Ï∞Ω Present-Dismiss
    
    @State private var isTodayEmotion = false   /// ÏûëÏÑ±Ï∞ΩÏóêÏÑú Ïò§ÎäòÏùò Í∞êÏ†ï ÏÑ†ÌÉù Present-Dismiss
    
    /// Î™®ÎãùÌéòÏù¥Ìçº Ï†úÎ™©, ÎÇ¥Ïö©, Ïò§ÎäòÏùò Ï≤´ Î≤àÏß∏ Í∞êÏ†ï
    @State private var titleText = ""
    @State private var contentText = ""
    @State private var selectedTodayEmotion = ""
    
    /// Î™®ÎãùÌéòÏù¥Ìçº ÏÉùÏÑ± ÏÑ±Í≥µ/Ïã§Ìå® Í∞í
    @State private var showAlert = false
    
    private let repository = MorningPaperTableRepository()
    
    /// Realm Î™®ÎãùÌéòÏù¥Ìçº Îç∞Ïù¥ÌÑ∞
    @ObservedResults(MorningPaper.self) var morningPaperList

    var body: some View {
        NavigationView {
            VStack(alignment: .leading) {
                dateTextView()
                titleFieldView()
                contentFieldView()
            }
            .frame(maxWidth: .infinity)
            .padding(.horizontal, 20)
            .toolbar {
                /// `Dismiss`
                ToolbarItem(placement: .topBarLeading) {
                    Button(action: {
                        isWritingViewPresent.toggle()
                    }, label: {
                        Image(.backButton)
                    })
                }
                /// `Done`
                ToolbarItem(placement: .topBarTrailing) {
                    Button(action: {
                        print("ÏôÑÎ£å Ï≤òÎ¶¨")
                        /// Î™®ÎãùÌéòÏù¥Ìçº ÏÉùÏÑ± - ÏûëÏÑ± Ï∞Ω dismiss - toast
                        createMorningPaper { isSuccess in
                            if !isSuccess { 
                                showAlert.toggle()
                            } else {
                                isWritingViewPresent.toggle()
                            }
                        }
                    }, label: {
                        Text("Done")
                            .baselineOffset(-8)
                            .font(.morenaBold16)
                            .foregroundStyle(.primaryBlack)
                    })
                    .alert("Ïò§ÎäòÏùò Í∏∞Î°ùÏùÑ ÏôÑÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî. üïØÔ∏è",
                           isPresented: $showAlert,
                           presenting: Constant.Button.alert) { (_, okay) in
                        Button(okay) { showAlert.toggle() }
                    }
                }
            }
        }
    }
    
    /// ÏÉÅÎã® ÎÇ†Ïßú
    private func dateTextView() -> some View {
        HStack {
            Text(DateFormatterManager.getFormattedTodayString())
                .font(.morenaBold14)
                .padding(.top, 20)
            Spacer()
            Button(action: {
                isTodayEmotion.toggle()
            }, label: {
                Text(selectedTodayEmotion == "" ? "Ïò§ÎäòÏùò Ï≤´ Î≤àÏß∏ Í∞êÏ†ï ÏÑ†ÌÉù" : selectedTodayEmotion)
                    .font(.gowunRegular14)
                    .foregroundStyle(.primaryBlack)
                    .bold()
            })
            .fullScreenCover(isPresented: $isTodayEmotion, content: {
                TodayEmotionView(isTodayEmotion: $isTodayEmotion, 
                                 selectedTodayEmotion: $selectedTodayEmotion)
            })
        }
        
    }
    
    /// Î™®ÎãùÌéòÏù¥Ìçº Ï†úÎ™©
    private func titleFieldView() -> some View {
        TextField("Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.", text: $titleText, prompt: Text("Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.").font(.gowunRegular20))
            .font(.gowunRegular20)
            .bold()
    }
    
    /// Î™®ÎãùÌéòÏù¥Ìçº ÎÇ¥Ïö©
    private func contentFieldView() -> some View {
        ZStack {
            /// background ÎùºÏö¥Îìú Ï≤òÎ¶¨
            RoundedRectangle(cornerRadius: 8)
                .stroke(.primaryGray, lineWidth: 1)
            /// Ïã§Ï†ú Ïª®ÌÖêÏ∏† Î∂ÄÎ∂Ñ
            TextEditor(text: $contentText)
                .font(.gowunRegular14)
                .overlay(alignment: .topLeading) {
                    Text(Constant.MorningPaper.contentPlaceholder)
                        .foregroundStyle(contentText.isEmpty ? .gray : .clear)
                        .font(.gowunRegular12)
                        .padding(10)
                }
                .border(.primaryGray)
                .clipShape(.rect(cornerRadius: 10))
        }
    }
    
    /// Î™®ÎãùÌéòÏù¥Ìçº ÏûëÏÑ± Í∏∞Îä•
    private func createMorningPaper(completion: @escaping (Bool) -> ()) {
        guard !titleText.isEmpty && !contentText.isEmpty && !selectedTodayEmotion.isEmpty else {
            completion(false)
            return
        }
        let morningPaper = MorningPaper(title: titleText, content: contentText, emotion: selectedTodayEmotion)
        print("morningPaper", morningPaper)
        
        $morningPaperList.append(morningPaper)
        titleText = ""
        contentText = ""
        selectedTodayEmotion = ""
        
        print("Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÌôïÏù∏", morningPaperList)
        repository.detectRealmURL()
        
        completion(true)
    }
}
